<?php
/**
 * 
 *@package com.epayment.util.implementation.xml;
 */
class SveaXMLBuilder {
	/**
	 * @var XMLWriter
	 */
	private $XMLWriter;
	/**
	 * @param SveaOrder $order
	 * This method expect UTF-8 input
	 */
	public function getOrderXML(SveaOrder $order) {	
		$this->XMLWriter = new XMLWriter();
		$this->XMLWriter->openMemory();
		$this->XMLWriter->setIndent(true);
		$this->XMLWriter->startDocument("1.0","UTF-8");
		$this->XMLWriter->startElement("payment");
		$this->XMLWriter->writeComment("Message generated by webpay integration pack for PHP Version ".SveaOrder::version);
		$this->XMLWriter->writeElement("customerRefNo",$order->customerRefno);
		$this->XMLWriter->writeElement("returnurl",$order->returnUrl);
		$this->XMLWriter->writeElement("amount",$order->amount);
		$this->XMLWriter->writeElement("currency",$order->currency);
		if($order->vat != null){
			$this->XMLWriter->writeElement("vat",$order->vat);
		}
		$this->serializeOrderRows($order->orderRows);
		if($order->paymentMethod != SveaOrder::PAYPAGE) {
			$this->XMLWriter->writeElement("paymentMethod",$order->paymentMethod);
		}
		$this->serializeMap($order->params);
		$this->serializeExcludePaymentMethods($order->excludePaymentMethods);
		$this->XMLWriter->endElement();
		$this->XMLWriter->endDocument();
		return $this->XMLWriter->flush();
	}
	
	private function serializeExcludePaymentMethods($excludePaymentMethods){
		if($excludePaymentMethods != null && count($excludePaymentMethods) > 0){
			$this->XMLWriter->startElement("excludePaymentMethods");
			foreach($excludePaymentMethods as $paymentMethod){
				$this->XMLWriter->writeElement("exclude" , $paymentMethod);
			}
			$this->XMLWriter->endElement();
		}
	}
	
	private function serializeOrderRows($orderRows) {
		if(count($orderRows) > 0){
			$this->XMLWriter->startElement("orderrows");
			foreach($orderRows as $orderRow){
				$this->serializeOrderRow($orderRow);
			}
			$this->XMLWriter->endElement();
		}
	}
	
	private function serializeOrderRow(SveaOrderRow $orderRow) {
		$this->XMLWriter->startElement("row");
		$this->XMLWriter->writeElement("name", $orderRow->name);
		$this->XMLWriter->writeElement("description", $orderRow->description);
		$this->XMLWriter->writeElement("sku", $orderRow->sku);
		$this->XMLWriter->writeElement("unit", $orderRow->unit);
		$this->XMLWriter->writeElement("amount", $orderRow->amount);
		
		if(!empty($orderRow->vat) && $orderRow->vat != null){
			$this->XMLWriter->writeElement("vat", $orderRow->vat);
		}
		$this->XMLWriter->writeElement("quantity", $orderRow->quantity);
		$this->XMLWriter->endElement();
	}
	
	private function serializeMap($params) {
		if(count($params) > 0){
			foreach($params as $k=>$v){
				$this->XMLWriter->writeElement($k,$v);
			}
		}
	}
	
	private function serializeComplexType($name , $value){
		$this->XMLWriter->startElement($name);
		foreach($value as $paramName => $paramValue){
				if(is_array($paramValue) || is_object($paramValue)){
					$this->serializeComplexType($paramName, $paramValue);	
				}else{
					$this->XMLWriter->writeElement($paramName , $paramValue);
				}
		}
		$this->XMLWriter->endElement();
	}
	
	public function serializeRestRequest($request){	
		$this->XMLWriter = new XMLWriter();
		$this->XMLWriter->openMemory();
		$this->XMLWriter->setIndent(true);
		$this->XMLWriter->startDocument("1.0","UTF-8");
		$this->XMLWriter->startElement($request->getRootElementName());
		foreach($request as $paramName => $paramValue){
			if($paramValue instanceof SveaOrder){
				unset($this->XMLWriter);
				return $this->getOrderXML($paramValue);
			}
			if(is_array($paramValue) || is_object($paramValue)){
				$this->serializeComplexType($paramName, $paramValue);	
			}else{
				$this->XMLWriter->writeElement($paramName , $paramValue);
			}
		}
		$this->XMLWriter->endElement();
		$this->XMLWriter->endDocument();
		
		return $this->XMLWriter->flush();
	}
	
}